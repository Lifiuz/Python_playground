import logging
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta
import psycopg2
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
ENTRY_PASSWORD = os.getenv("ENTRY_PASSWORD")

# –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ env —Ñ–∞–π–ª–∞
DB_CONFIG = {
    'dbname': os.getenv("DB_NAME"),
    'user': os.getenv("DB_USER"),
    'password': os.getenv("DB_PASSWORD"),
    'host': os.getenv("DB_HOST"),
    'port': os.getenv("DB_PORT")
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler('log.txt', encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logging.getLogger().addHandler(file_handler)

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–º–µ–Ω (–º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –Ω–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å)
special_minus_2 = [1, 2, 4, 6, 7]  # ID –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ —Å –æ—Å–æ–±—ã–º –ø—Ä–∞–≤–∏–ª–æ–º -2 —á–∞—Å–∞
special_minus_4 = [5]  # ID –∏–Ω–∂–µ–Ω–µ—Ä–∞ —Å –æ—Å–æ–±—ã–º –ø—Ä–∞–≤–∏–ª–æ–º -4 —á–∞—Å–∞

months = {
    "01": "–Ø–Ω–≤–∞—Ä—å", "02": "–§–µ–≤—Ä–∞–ª—å", "03": "–ú–∞—Ä—Ç",
    "04": "–ê–ø—Ä–µ–ª—å", "05": "–ú–∞–π", "06": "–ò—é–Ω—å",
    "07": "–ò—é–ª—å", "08": "–ê–≤–≥—É—Å—Ç", "09": "–°–µ–Ω—Ç—è–±—Ä—å",
    "10": "–û–∫—Ç—è–±—Ä—å", "11": "–ù–æ—è–±—Ä—å", "12": "–î–µ–∫–∞–±—Ä—å"
}

def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    return psycopg2.connect(**DB_CONFIG)

def get_engineers_list():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT name FROM engineers ORDER BY name")
            return [row[0] for row in cursor.fetchall()]
    finally:
        conn.close()

engineer_list = get_engineers_list()

def get_update_time(month):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT refresh_time 
                FROM update_time
                WHERE month = %s
            """, (month,))
            result = cursor.fetchone()
            return result[0].strftime('%Y-%m-%d %H:%M:%S') if result else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    finally:
        conn.close()

def get_engineer_info(engineer_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–∂–µ–Ω–µ—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT e.id, w.smena, d.department_id, t.tg_link
                FROM engineers e
                LEFT JOIN engineer_work_hour w ON e.id = w.engineer_id
                LEFT JOIN engineer_departments d ON e.id = d.engineer_id
                LEFT JOIN engineer_tg_links t ON e.id = t.engineer_id
                WHERE e.name = %s
            """, (engineer_name,))
            result = cursor.fetchone()

            if not result:
                return None

            return {
                'id': result[0],
                'shift_duration': int(result[1]) if result[1] else 12,
                'department_id': result[2],
                'telegram_link': result[3] if result[3] else "https://t.me/"
            }
    finally:
        conn.close()

def get_engineer_schedule(engineer_id, year, month):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT day, shift_value 
                FROM engineers_schedule
                WHERE engineer_id = %s AND year = %s AND month = %s
                ORDER BY day
            """, (engineer_id, year, month))
            return cursor.fetchall()
    finally:
        conn.close()

def get_day_schedule(year, month, day):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT e.name, s.shift_value, w.smena, d.department_id
                FROM engineers_schedule s
                JOIN engineers e ON s.engineer_id = e.id
                LEFT JOIN engineer_work_hour w ON e.id = w.engineer_id
                LEFT JOIN engineer_departments d ON e.id = d.engineer_id
                WHERE s.year = %s AND s.month = %s AND s.day = %s
                AND s.shift_value NOT IN ('–≤', '–æ')
            """, (year, month, day))
            return cursor.fetchall()
    finally:
        conn.close()

def get_current_shift_engineers(year, month, day, current_hour):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –Ω–∞ —Å–º–µ–Ω–µ"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT e.name, s.shift_value, w.smena, d.department_id, t.tg_link
                FROM engineers_schedule s
                JOIN engineers e ON s.engineer_id = e.id
                LEFT JOIN engineer_work_hour w ON e.id = w.engineer_id
                LEFT JOIN engineer_departments d ON e.id = d.engineer_id
                LEFT JOIN engineer_tg_links t ON e.id = t.engineer_id
                WHERE s.year = %s AND s.month = %s AND s.day = %s
                AND s.shift_value NOT IN ('–≤', '–æ')
            """, (year, month, day))

            working_engineers = []
            for name, shift_value, shift_duration, department_id, tg_link in cursor.fetchall():
                shift_start = int(shift_value)
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
                cursor.execute("SELECT id FROM engineers WHERE name = %s", (name,))
                engineer_id = cursor.fetchone()[0]

                if engineer_id in special_minus_2:
                    shift_start -= 2
                elif engineer_id in special_minus_4:
                    shift_start -= 4

                shift_duration = int(shift_duration) if shift_duration else 12
                shift_end = shift_start + shift_duration

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ–π—á–∞—Å —Å–º–µ–Ω–∞
                if shift_start <= current_hour < shift_end:
                    is_active_shift = True
                elif shift_start >= 20 and current_hour < (shift_end % 24):
                    is_active_shift = True
                else:
                    is_active_shift = False

                if is_active_shift:
                    working_engineers.append({
                        'name': name,
                        'shift_start': shift_start,
                        'shift_end': shift_end,
                        'department_id': department_id,
                        'telegram_link': tg_link if tg_link else "https://t.me/"
                    })

            return working_engineers
    finally:
        conn.close()

def get_department_name(department_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –ø–æ ID"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT name FROM departments WHERE id = %s", (department_id,))
            result = cursor.fetchone()
            return result[0] if result else "‚ùì –û—Ç–¥–µ–ª –Ω–µ —É–∫–∞–∑–∞–Ω"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞: {e}")
        return "‚ùì –û—Ç–¥–µ–ª –Ω–µ —É–∫–∞–∑–∞–Ω"
    finally:
        conn.close()

def generate_shift_message(month, day_index, current_hour):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–∏—Ö —Å–º–µ–Ω–∞—Ö (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ë–î)"""
    try:
        now_utc = datetime.utcnow()
        now_msk = now_utc + timedelta(hours=3)
        year = now_msk.year
        day = now_msk.day

        working_engineers = get_current_shift_engineers(year, month, day, current_hour)
        update_time = get_update_time(int(month))

        message_lines = []
        for engineer in working_engineers:
            start_str = f"{engineer['shift_start'] % 24:02d}:00"
            end_str = f"{engineer['shift_end'] % 24:02d}:00"

            message_lines.append(
                f"üë§ <b>{engineer['name']}</b>\n"
                f"üïí –°–º–µ–Ω–∞: <b>{start_str}‚Äì{end_str}</b>\n"
                f"üîó <a href=\"{engineer['telegram_link']}\">–ù–∞–ø–∏—Å–∞—Ç—å</a>\n"
                f"üè¢ –û—Ç–¥–µ–ª: {get_department_name(engineer['department_id'])}\n"
            )

        if not message_lines:
            message_lines.append("üí§ –°–µ–π—á–∞—Å –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –Ω–∞ —Å–º–µ–Ω–µ")

        message_lines.append(f"\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: <i>{update_time}</i>")
        return "\n".join(message_lines)

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"

def show_main_menu(update_or_query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    now_utc = datetime.utcnow()
    now_msk = now_utc + timedelta(hours=3)
    current_hour = now_msk.hour
    day_index = now_msk.day - 1
    month = now_msk.strftime("%m")

    weekdays = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–í—Ç–æ—Ä–Ω–∏–∫", 2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥", 4: "–ü—è—Ç–Ω–∏—Ü–∞", 5: "–°—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    months_ru = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞",
        4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
        7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è",
        10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }

    formatted_date = (f"{weekdays[now_msk.weekday()]}, {now_msk.day} "
                      f"{months_ru[now_msk.month]} {now_msk.strftime('%H:%M')}")

    shift_message = generate_shift_message(month, day_index, current_hour)

    message = (f"üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–ú–°–ö):</b> {formatted_date}\n"
               f"üïê –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)\n\n"
               f"üë∑‚Äç‚ôÇÔ∏è <b>–°–µ–π—á–∞—Å –Ω–∞ —Å–º–µ–Ω–µ (–ú–°–ö):</b>\n\n{shift_message}")

    keyboard = [
        [InlineKeyboardButton("üìÜ –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ", callback_data='choose_month')],
        [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ —Å–º–µ–Ω –ø–æ –∏–Ω–∂–µ–Ω–µ—Ä—É", callback_data='choose_engineer')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about_bot')],
        [InlineKeyboardButton("‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data='feedback')]
    ]

    if isinstance(update_or_query, Update):
        update_or_query.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    elif hasattr(update_or_query, 'edit_message_text'):
        update_or_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
        update_or_query.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML',
            disable_web_page_preview=True
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext):

    if context.user_data.get('authenticated'):
        show_main_menu(update, context)
    else:
        update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

    user = update.effective_user
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞: {user.full_name} | @{user.username} | ID: {user.id}")
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥-—Ñ–∞–π–ª
    with open('log.txt', 'a', encoding='utf-8') as f:
        f.write(
            f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –≤ –±–æ—Ç–∞: {user.full_name} | @{user.username} | ID: {user.id}\n")


def handle_password(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
    if not context.user_data.get('waiting_feedback'):
        if update.message.text == ENTRY_PASSWORD:
            context.user_data['authenticated'] = True
            show_main_menu(update, context)
        else:
            update.message.reply_text("–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    else:
        handle_feedback_entry(update, context)

def handle_feedback_entry(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    if context.user_data.get('waiting_feedback'):
        user = update.effective_user
        text = update.message.text

        feedback_entry = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username or user.full_name} (ID: {user.id})\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}\n"
            + '-' * 50 + '\n'
        )

        with open("feedback.txt", "a", encoding="utf-8") as f:
            f.write(feedback_entry)

        context.user_data['waiting_feedback'] = False
        update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
        show_main_menu(update, context)
    else:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'")


def ask_feedback(update, context):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open("ask_feedback.txt", "r", encoding="utf-8") as file:
            feedback_text = file.read().strip()

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_who')]]
        context.user_data['waiting_feedback'] = True

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
        update.callback_query.edit_message_text(
            feedback_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'  # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        )

    except FileNotFoundError:
        update.callback_query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å @pasta159",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logging.error("–§–∞–π–ª ask_feedback.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        update.callback_query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

def choose_engineer(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    keyboard = []
    row = []
    for i, name in enumerate(engineer_list):
        row.append(InlineKeyboardButton(name.split()[0], callback_data=f"engineer_{i}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_who')])
    update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

def choose_month_for_engineer(update, context, engineer_index):
    """–í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–∞ (–æ—Ç —è–Ω–≤–∞—Ä—è –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)"""
    context.user_data['selected_engineer'] = engineer_list[engineer_index]
    current_month = int(datetime.now().strftime("%m"))
    keyboard = []
    row = []

    for month_num in range(1, current_month + 1):
        month_code = f"{month_num:02d}"
        row.append(InlineKeyboardButton(months[month_code], callback_data=f"engmonth_{month_code}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []

    if row:
        keyboard.append(row)

    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_engineer'),
        InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')
    ])

    update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=InlineKeyboardMarkup(keyboard))

def choose_month(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Å—è—Ü—ã –æ—Ç —è–Ω–≤–∞—Ä—è –¥–æ —Ç–µ–∫—É—â–µ–≥–æ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)"""
    current_month = int(datetime.now().strftime("%m"))
    keyboard = []

    for month_num in range(1, current_month + 1):
        month_code = f"{month_num:02d}"
        keyboard.append([InlineKeyboardButton(months[month_code], callback_data=f"month_{month_code}")])

    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_who'),
        InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')
    ])

    update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=InlineKeyboardMarkup(keyboard))

def choose_day(update, context, month):
    """–í—ã–±–æ—Ä –¥–Ω—è —Å —É—á–µ—Ç–æ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ"""
    current_day = int(datetime.now().strftime("%d"))
    current_month = datetime.now().strftime("%m")
    keyboard = []

    max_day = 31
    if month == current_month:
        max_day = current_day - 1

    for day in range(1, max_day + 1):
        if len(keyboard) == 0 or len(keyboard[-1]) == 3:
            keyboard.append([InlineKeyboardButton(str(day), callback_data=f"date_{month}_{day:02d}")])
        else:
            keyboard[-1].append(InlineKeyboardButton(str(day), callback_data=f"date_{month}_{day:02d}"))

    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_month'),
        InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')
    ])

    update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=InlineKeyboardMarkup(keyboard))

def show_about(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞ about.txt"""
    try:
        with open("about.txt", "r", encoding="utf-8") as f:
            about_text = f.read().strip()

        keyboard = [[InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')]]
        update.edit_message_text(about_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    except FileNotFoundError:
        update.edit_message_text("‚ùó –§–∞–π–ª about.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        update.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")


#–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
def show_selected_day(update, context, month, day):

    try:
        year = datetime.now().year
        schedule_data = get_day_schedule(year, month, day)
        update_time = get_update_time(int(month))

        working_engineers = []
        for name, shift_value, shift_duration, department_id in schedule_data:
            shift_start = int(shift_value)
            engineer_info = get_engineer_info(name)

            if engineer_info['id'] in special_minus_2:
                shift_start -= 2
            elif engineer_info['id'] in special_minus_4:
                shift_start -= 4

            shift_duration = int(shift_duration) if shift_duration else 12
            shift_end = shift_start + shift_duration

            start_str = f"{shift_start % 24:02d}:00"
            end_str = f"{shift_end % 24:02d}:00"

            working_engineers.append(
                f"üë§ <b>{name}</b>\n"
                f"üïí –°–º–µ–Ω–∞: <b>{start_str}‚Äì{end_str}</b>\n"
                f"üè¢ –û—Ç–¥–µ–ª: {get_department_name(department_id)}\n"
            )

        month_name = months.get(month, month)
        if working_engineers:
            message_parts = [
                f"üìÖ <b>–†–∞–±–æ—Ç–∞–ª–∏ {day}.{month_name}:</b>",
                "",
                *working_engineers,
                "",
                f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}</i>"
            ]
            message = "\n".join(message_parts)
        else:
            message = "\n".join([
                f"üìÖ <b>{day}.{month_name} –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª</b>",
                "",
                f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}</i>"
            ])
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_month')],
            [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')]
        ]
        update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    except Exception as e:
        error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
        update.callback_query.edit_message_text(error_message)

#–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –∑–∞ –º–µ—Å—è—Ü
def show_engineer_schedule(update, context, month):

    name = context.user_data.get('selected_engineer')
    try:
        year = datetime.now().year
        engineer_info = get_engineer_info(name)
        if not engineer_info:
            raise Exception("–ò–Ω–∂–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        schedule = get_engineer_schedule(engineer_info['id'], year, month)
        update_time = get_update_time(int(month))

        shift_days = [str(day) for day, value in schedule if str(value).isdigit()]

        message = (f"<b>{name}</b> —Ä–∞–±–æ—Ç–∞–ª(–∞) –≤ {months[month]}:\n"
                  f"<b>{', '.join(shift_days) if shift_days else '–ù–µ—Ç —Å–º–µ–Ω'}</b>\n\n"
                  f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}</i>")

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_engineer')],
            [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')]
        ]
        update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞: {str(e)}"
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_engineer')],
            [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')]
        ]
        update.callback_query.edit_message_text(
            error_message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
def handle_buttons(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    query.answer()

    user = update.effective_user
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥-—Ñ–∞–π–ª
    with open('log.txt', 'a', encoding='utf-8') as f:
        f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}\n")

    if not context.user_data.get('authenticated'):
        query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return

    if data == 'about_bot':
        show_about(query, context)
    elif data == 'main_who':
        show_main_menu(query, context)
    elif data == 'choose_month':
        choose_month(update, context)
    elif data.startswith('month_'):
        month = data.split('_')[1]
        choose_day(update, context, month)
    elif data.startswith('date_'):
        _, month, day = data.split('_')
        show_selected_day(update, context, month, day)
    elif data == 'choose_engineer':
        choose_engineer(update, context)
    elif data.startswith('engineer_'):
        index = int(data.split('_')[1])
        choose_month_for_engineer(update, context, index)
    elif data.startswith('engmonth_'):
        month = data.split('_')[1]
        show_engineer_schedule(update, context, month)
    elif data == 'feedback':
        ask_feedback(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command & ~Filters.regex(r'^/start'),
        handle_password
    ))
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command,
        handle_feedback_entry
    ))
    dp.add_handler(CallbackQueryHandler(handle_buttons))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()