import json
import logging
import os
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters


TOKEN = '7812092497:AAGTfz8AGQCPkkg15SkP3WNDQVFptCTce6k'
PASSWORD = 'stsk'  # –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É

#–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

special_minus_2 = [
    "–ï—Ä—à–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–†–ú",
    "–ù–µ–ª—é–±–∏–Ω –ù–∏–∫–∏—Ç–∞ –ü–†–ú",
    "–ü–æ–ª—è–Ω—Ü–µ–≤ –ï–≤–≥–µ–Ω–∏–π –ü–†–ú",
    "–®–∫–∞—Ä–æ–≤ –ò–≤–∞–Ω –ü–†–ú",
    "–†–∞–∫–æ–≤ –†–æ–º–∞–Ω –ü–†–ú"
]
special_minus_4 = ["–°–æ–∫–æ–ª–æ–≤ –°–µ—Ä–≥–µ–π –ù–°–ö"]

months = {
    "01": "–Ø–Ω–≤–∞—Ä—å", "02": "–§–µ–≤—Ä–∞–ª—å", "03": "–ú–∞—Ä—Ç",
    "04": "–ê–ø—Ä–µ–ª—å", "05": "–ú–∞–π", "06": "–ò—é–Ω—å",
    "07": "–ò—é–ª—å", "08": "–ê–≤–≥—É—Å—Ç", "09": "–°–µ–Ω—Ç—è–±—Ä—å",
    "10": "–û–∫—Ç—è–±—Ä—å", "11": "–ù–æ—è–±—Ä—å", "12": "–î–µ–∫–∞–±—Ä—å"
}

engineer_list = []
try:
    with open("work_hour.json", encoding="utf-8") as f:
        work_hours = json.load(f)
        engineer_list = sorted(list(work_hours.keys()))
except:
    pass


def handle_feedback_entry(update: Update, context: CallbackContext):
    if context.user_data.get('waiting_feedback'):
        user = update.effective_user
        text = update.message.text

        feedback_entry = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username or user.full_name} (ID: {user.id})\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}\n"
            + '-' * 50 + '\n'
        )

        with open("feedback.txt", "a", encoding="utf-8") as f:
            f.write(feedback_entry)

        context.user_data['waiting_feedback'] = False
        update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
        show_main_menu(update, context)
    else:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'")

def ask_feedback(update, context):
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_who')]]
    context.user_data['waiting_feedback'] = True
    update.callback_query.edit_message_text(
        "‚úèÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π) –¥–ª—è –∞–≤—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å"""
    if context.user_data.get('authenticated'):
        show_main_menu(update, context)
    else:
        update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    user = update.effective_user
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞: {user.full_name} | @{user.username} | ID: {user.id}")

def handle_password(update: Update, context: CallbackContext):
    if not context.user_data.get('waiting_feedback'):
        if update.message.text == PASSWORD:
            context.user_data['authenticated'] = True
            show_main_menu(update, context)
        else:
            update.message.reply_text("–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —É @pasta159")
    else:
        handle_feedback_entry(update, context)

def show_main_menu(update_or_query, context):
    now_utc = datetime.utcnow()
    now_msk = now_utc + timedelta(hours=3)
    current_hour = now_msk.hour
    day_index = now_msk.day - 1
    month = now_msk.strftime("%m")

    weekdays = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–í—Ç–æ—Ä–Ω–∏–∫", 2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥", 4: "–ü—è—Ç–Ω–∏—Ü–∞", 5: "–°—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    months_ru = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞",
        4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
        7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è",
        10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }

    formatted_date = (f"{weekdays[now_msk.weekday()]}, {now_msk.day} "
                      f"{months_ru[now_msk.month]} {now_msk.strftime('%H:%M')}")

    shift_message = generate_shift_message(month, day_index, current_hour)

    message = (f"üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–ú–°–ö):</b> {formatted_date}\n"
               f"üïê –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)\n\n"
               f"üë∑‚Äç‚ôÇÔ∏è <b>–°–µ–π—á–∞—Å –Ω–∞ —Å–º–µ–Ω–µ (–ú–°–ö):</b>\n\n{shift_message}")

    keyboard = [
        [InlineKeyboardButton("üìÜ –ö—Ç–æ —Ä–∞–±–æ—Ç–∞–ª", callback_data='choose_month')],
        [InlineKeyboardButton("üîé –°–º–µ–Ω—ã –∏–Ω–∂–µ–Ω–µ—Ä–∞", callback_data='choose_engineer')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about_bot')],
        [InlineKeyboardButton("‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data='feedback')]
    ]

    if isinstance(update_or_query, Update):
        update_or_query.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard),
                                           parse_mode='HTML', disable_web_page_preview=True)
    elif hasattr(update_or_query, 'edit_message_text'):
        update_or_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard),
                                          parse_mode='HTML', disable_web_page_preview=True)
    elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
        update_or_query.callback_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard),
                                                         parse_mode='HTML', disable_web_page_preview=True)

def choose_engineer(update, context):
    keyboard = []
    row = []
    for i, name in enumerate(engineer_list):
        row.append(InlineKeyboardButton(name.split()[0], callback_data=f"engineer_{i}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_who')])
    update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

def choose_month_for_engineer(update, context, engineer_index):
    """–í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–∞ (–æ—Ç —è–Ω–≤–∞—Ä—è –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)"""
    context.user_data['selected_engineer'] = engineer_list[engineer_index]
    current_month = int(datetime.now().strftime("%m"))
    keyboard = []
    row = []

    for month_num in range(1, current_month + 1):
        month_code = f"{month_num:02d}"
        row.append(InlineKeyboardButton(months[month_code], callback_data=f"engmonth_{month_code}"))
        if len(row) == 3:
            keyboard.append(row)
            row = []

    if row:
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_engineer'),
        InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')
    ])

    update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=InlineKeyboardMarkup(keyboard))

def show_engineer_schedule(update, context, month):
    name = context.user_data.get('selected_engineer')
    try:
        with open(os.path.join("schedule_engineers", f"{month}_2025.json"), encoding="utf-8") as f:
            data = json.load(f)
            eng_data = data.get("–ò–Ω–∂–µ–Ω–µ—Ä—ã", {})

        if name not in eng_data:
            raise Exception("–ò–Ω–∂–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ")

        days = eng_data[name]
        shift_days = []
        for i, value in enumerate(days):
            if isinstance(value, int):
                shift_days.append(str(i + 1))

        message = f"<b>{name}</b> —Ä–∞–±–æ—Ç–∞–ª(–∞) –≤ {months[month]}:\n<b>{', '.join(shift_days) if shift_days else '–ù–µ—Ç —Å–º–µ–Ω'}</b>"

    except Exception as e:
        message = f"–û—à–∏–±–∫–∞: {e}"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_engineer')],
                [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')]]

    update.callback_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

def generate_shift_message(month, day_index, current_hour):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–∏—Ö —Å–º–µ–Ω–∞—Ö (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)"""
    try:
        with open(os.path.join("schedule_engineers", f"{month}_2025.json"), encoding="utf-8") as f:
            data = json.load(f)
            eng_data = data["–ò–Ω–∂–µ–Ω–µ—Ä—ã"]
            update_time = data.get("–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

        with open("work_hour.json", encoding="utf-8") as f:
            work_hours = json.load(f)

        with open("telegram_link.json", encoding="utf-8") as f:
            telegram_links = json.load(f)

        with open("departament.json", encoding="utf-8") as f:
            departments = json.load(f)

        message_lines = []  # –£–±—Ä–∞–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

        for name, schedule in eng_data.items():
            if len(schedule) <= day_index:
                continue

            value = schedule[day_index]
            if value in ["–≤", "–æ"] or not isinstance(value, int):
                continue

            shift_start = value
            if name in special_minus_2:
                shift_start -= 2
            elif name in special_minus_4:
                shift_start -= 4

            shift_mode = work_hours.get(name, 0)
            shift_end = shift_start + (9 if shift_mode == 1 else 12)

            if shift_start <= current_hour < shift_end:
                is_active_shift = True
            elif shift_start >= 20 and current_hour < (shift_end % 24):
                is_active_shift = True
            else:
                is_active_shift = False

            if is_active_shift:
                start_str = f"{shift_start % 24:02d}:00"
                end_str = f"{shift_end % 24:02d}:00"
                telegram = telegram_links.get(name, "https://t.me/")
                department = departments.get(name, "‚ùì –û—Ç–¥–µ–ª –Ω–µ —É–∫–∞–∑–∞–Ω")

                message_lines.append(
                    f"üë§ <b>{name}</b>\n"
                    f"üïí –°–º–µ–Ω–∞: <b>{start_str}‚Äì{end_str}</b>\n"
                    f"üîó <a href=\"{telegram}\">–ù–∞–ø–∏—Å–∞—Ç—å</a>\n"
                    f"üè¢ –û—Ç–¥–µ–ª: {department}\n"
                )

        if not message_lines:
            message_lines.append("üí§ –°–µ–π—á–∞—Å –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –Ω–∞ —Å–º–µ–Ω–µ")

        message_lines.append(f"\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: <i>{update_time.strip()}</i>")
        return "\n".join(message_lines)

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"

def show_about(update, context):
    try:
        with open("about.txt", encoding="utf-8") as f:
            about_text = f.read()
    except Exception as e:
        about_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

    keyboard = [[InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')]]
    update.edit_message_text(about_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

def choose_month(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Å—è—Ü—ã –æ—Ç —è–Ω–≤–∞—Ä—è –¥–æ —Ç–µ–∫—É—â–µ–≥–æ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)"""
    current_month = int(datetime.now().strftime("%m"))
    keyboard = []

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ—Å—è—Ü–µ–≤ –æ—Ç —è–Ω–≤–∞—Ä—è –¥–æ —Ç–µ–∫—É—â–µ–≥–æ
    for month_num in range(1, current_month + 1):
        month_code = f"{month_num:02d}"
        keyboard.append([InlineKeyboardButton(months[month_code], callback_data=f"month_{month_code}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_who'),
        InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')
    ])

    update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=InlineKeyboardMarkup(keyboard))

def choose_day(update, context, month):
    """–í—ã–±–æ—Ä –¥–Ω—è —Å —É—á–µ—Ç–æ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ"""
    current_day = int(datetime.now().strftime("%d"))
    current_month = datetime.now().strftime("%m")
    keyboard = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    max_day = 31
    if month == current_month:
        max_day = current_day - 1  # –¢–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏

    for day in range(1, max_day + 1):
        if len(keyboard) == 0 or len(keyboard[-1]) == 3:
            keyboard.append([InlineKeyboardButton(str(day), callback_data=f"date_{month}_{day:02d}")])
        else:
            keyboard[-1].append(InlineKeyboardButton(str(day), callback_data=f"date_{month}_{day:02d}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_month'),
        InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')
    ])

    update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=InlineKeyboardMarkup(keyboard))

def show_selected_day(update, context, month, day):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–º–µ–Ω—ã"""
    try:
        day_index = int(day) - 1

        with open(os.path.join("schedule_engineers", f"{month}_2025.json"), encoding="utf-8") as f:
            data = json.load(f)
            eng_data = data.get("–ò–Ω–∂–µ–Ω–µ—Ä—ã", {})
            update_time = data.get("–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

        with open("work_hour.json", encoding="utf-8") as f:
            work_hours = json.load(f)

        with open("departament.json", encoding="utf-8") as f:
            departments = json.load(f)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        working_engineers = []
        for name, schedule in eng_data.items():
            if len(schedule) > day_index:
                value = schedule[day_index]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ "–≤" –∏ –Ω–µ "–æ" –∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
                if value not in ["–≤", "–æ"] and isinstance(value, int):
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–º–µ–Ω—ã
                    shift_start = value
                    if name in special_minus_2:
                        shift_start -= 2
                    elif name in special_minus_4:
                        shift_start -= 4

                    shift_mode = work_hours.get(name, 0)
                    shift_end = shift_start + (9 if shift_mode == 1 else 12)

                    start_str = f"{shift_start % 24:02d}:00"
                    end_str = f"{shift_end % 24:02d}:00"
                    department = departments.get(name, "‚ùì –û—Ç–¥–µ–ª –Ω–µ —É–∫–∞–∑–∞–Ω")

                    working_engineers.append(
                        f"üë§ <b>{name}</b>\n"
                        f"üïí –°–º–µ–Ω–∞: <b>{start_str}‚Äì{end_str}</b>\n"
                        f"üè¢ {department}\n"
                    )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        month_name = months.get(month, month)
        if working_engineers:
            engineers_list = '\n'.join(working_engineers)
            message = (f"üìÖ <b>–†–∞–±–æ—Ç–∞–ª–∏ {day}.{month_name}:</b>\n\n" +
                       engineers_list + "\n\n" +
                       f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time.strip()}</i>")
        else:
            message = (f"üìÖ <b>{day}.{month_name} –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª</b>\n\n"
                       f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time.strip()}</i>")

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_month')],
            [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')]
        ]

        update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML',
            disable_web_page_preview=True
        )

    except Exception as e:
        error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_month')],
            [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='main_who')]
        ]
        update.callback_query.edit_message_text(
            error_message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

def handle_buttons(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    query.answer()

    if not context.user_data.get('authenticated'):
        query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return

    if data == 'about_bot':
        show_about(query, context)
    elif data == 'main_who':
        show_main_menu(query, context)
    elif data == 'choose_month':
        choose_month(update, context)
    elif data.startswith('month_'):
        month = data.split('_')[1]
        choose_day(update, context, month)
    elif data.startswith('date_'):
        _, month, day = data.split('_')
        show_selected_day(update, context, month, day)
    elif data == 'choose_engineer':
        choose_engineer(update, context)
    elif data.startswith('engineer_'):
        index = int(data.split('_')[1])
        choose_month_for_engineer(update, context, index)
    elif data.startswith('engmonth_'):
        month = data.split('_')[1]
        show_engineer_schedule(update, context, month)
    elif data == 'feedback':
        ask_feedback(update, context)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    dp.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∂–¥–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å)
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command & ~Filters.regex(r'^/start'),
        handle_password
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command,
        handle_feedback_entry
    ))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    dp.add_handler(CallbackQueryHandler(handle_buttons))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()